/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// BeaconUserData : A Beacon User's data and resulting analysis when checked against duplicate records and the Beacon Fraud Network.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct BeaconUserData {
    /// A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
    #[serde(rename = "date_of_birth")]
    pub date_of_birth: String,
    #[serde(rename = "name")]
    pub name: crate::models::BeaconUserName,
    #[serde(rename = "address")]
    pub address: crate::models::BeaconUserAddress,
    /// A valid email address. Must not have leading or trailing spaces and address must be RFC compliant. For more information, see [RFC 3696](https://datatracker.ietf.org/doc/html/rfc3696).
    #[serde(rename = "email_address", deserialize_with = "Option::deserialize")]
    pub email_address: Option<String>,
    /// A phone number in E.164 format.
    #[serde(rename = "phone_number", deserialize_with = "Option::deserialize")]
    pub phone_number: Option<String>,
    #[serde(rename = "id_number", deserialize_with = "Option::deserialize")]
    pub id_number: Option<crate::models::BeaconUserIdNumber>,
    /// An IPv4 or IPV6 address.
    #[serde(rename = "ip_address", deserialize_with = "Option::deserialize")]
    pub ip_address: Option<String>,
    #[serde(rename = "depository_accounts")]
    pub depository_accounts: Vec<crate::models::BeaconUserDepositoryAccount>,
}

impl BeaconUserData {
    /// A Beacon User's data and resulting analysis when checked against duplicate records and the Beacon Fraud Network.
    pub fn new(date_of_birth: String, name: crate::models::BeaconUserName, address: crate::models::BeaconUserAddress, email_address: Option<String>, phone_number: Option<String>, id_number: Option<crate::models::BeaconUserIdNumber>, ip_address: Option<String>, depository_accounts: Vec<crate::models::BeaconUserDepositoryAccount>) -> BeaconUserData {
        BeaconUserData {
            date_of_birth,
            name,
            address,
            email_address,
            phone_number,
            id_number,
            ip_address,
            depository_accounts,
        }
    }
}


