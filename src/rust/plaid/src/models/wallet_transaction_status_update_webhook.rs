/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// WalletTransactionStatusUpdateWebhook : Fired when the status of a wallet transaction has changed.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WalletTransactionStatusUpdateWebhook {
    /// `WALLET`
    #[serde(rename = "webhook_type")]
    pub webhook_type: String,
    /// `WALLET_TRANSACTION_STATUS_UPDATE`
    #[serde(rename = "webhook_code")]
    pub webhook_code: String,
    /// The `transaction_id` for the wallet transaction being updated
    #[serde(rename = "transaction_id")]
    pub transaction_id: String,
    /// The `payment_id` associated with the transaction. This will be present in case of `REFUND` and `PIS_PAY_IN`.
    #[serde(rename = "payment_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub payment_id: Option<Option<String>>,
    /// The EMI (E-Money Institution) wallet that this payment is associated with. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.
    #[serde(rename = "wallet_id", skip_serializing_if = "Option::is_none")]
    pub wallet_id: Option<String>,
    #[serde(rename = "new_status")]
    pub new_status: models::WalletTransactionStatus,
    #[serde(rename = "old_status")]
    pub old_status: models::WalletTransactionStatus,
    /// The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `\"2017-09-14T14:42:19.350Z\"`
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    #[serde(rename = "environment")]
    pub environment: models::WebhookEnvironmentValues,
}

impl WalletTransactionStatusUpdateWebhook {
    /// Fired when the status of a wallet transaction has changed.
    pub fn new(webhook_type: String, webhook_code: String, transaction_id: String, new_status: models::WalletTransactionStatus, old_status: models::WalletTransactionStatus, timestamp: String, environment: models::WebhookEnvironmentValues) -> WalletTransactionStatusUpdateWebhook {
        WalletTransactionStatusUpdateWebhook {
            webhook_type,
            webhook_code,
            transaction_id,
            payment_id: None,
            wallet_id: None,
            new_status,
            old_status,
            timestamp,
            environment,
        }
    }
}

