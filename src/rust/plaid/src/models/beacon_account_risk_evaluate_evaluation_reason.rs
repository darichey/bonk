/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// BeaconAccountRiskEvaluateEvaluationReason : Description of the reason you want to evaluate risk. `ONBOARDING`: user links a first bank account as part of the onboarding flow of your platform. `NEW_ACCOUNT`: user links another bank account or replaces the currently linked bank account on your platform. `INFORMATION_CHANGE`: user changes their information on your platform, e.g., updating their phone number. `DORMANT_USER`:  you decide to re-evaluate a user that becomes active after a period of inactivity.   `OTHER`: any other reasons not listed here Possible values:  `ONBOARDING`, `NEW_ACCOUNT`, `INFORMATION_CHANGE`, `DORMANT_USER`, `OTHER` 
/// Description of the reason you want to evaluate risk. `ONBOARDING`: user links a first bank account as part of the onboarding flow of your platform. `NEW_ACCOUNT`: user links another bank account or replaces the currently linked bank account on your platform. `INFORMATION_CHANGE`: user changes their information on your platform, e.g., updating their phone number. `DORMANT_USER`:  you decide to re-evaluate a user that becomes active after a period of inactivity.   `OTHER`: any other reasons not listed here Possible values:  `ONBOARDING`, `NEW_ACCOUNT`, `INFORMATION_CHANGE`, `DORMANT_USER`, `OTHER` 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BeaconAccountRiskEvaluateEvaluationReason {
    #[serde(rename = "ONBOARDING")]
    Onboarding,
    #[serde(rename = "NEW_ACCOUNT")]
    NewAccount,
    #[serde(rename = "INFORMATION_CHANGE")]
    InformationChange,
    #[serde(rename = "DORMANT_USER")]
    DormantUser,
    #[serde(rename = "OTHER")]
    Other,

}

impl std::fmt::Display for BeaconAccountRiskEvaluateEvaluationReason {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Onboarding => write!(f, "ONBOARDING"),
            Self::NewAccount => write!(f, "NEW_ACCOUNT"),
            Self::InformationChange => write!(f, "INFORMATION_CHANGE"),
            Self::DormantUser => write!(f, "DORMANT_USER"),
            Self::Other => write!(f, "OTHER"),
        }
    }
}

impl Default for BeaconAccountRiskEvaluateEvaluationReason {
    fn default() -> BeaconAccountRiskEvaluateEvaluationReason {
        Self::Onboarding
    }
}

