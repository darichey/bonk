/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// TransferRecurringCreateRequest : Defines the request schema for `/transfer/recurring/create`



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TransferRecurringCreateRequest {
    /// Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    #[serde(rename = "client_id", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    /// Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    #[serde(rename = "secret", skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// The Plaid `access_token` for the account that will be debited or credited.
    #[serde(rename = "access_token")]
    pub access_token: String,
    /// A random key provided by the client, per unique recurring transfer. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a recurring fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single recurring transfer is created.
    #[serde(rename = "idempotency_key")]
    pub idempotency_key: String,
    /// The Plaid `account_id` corresponding to the end-user account that will be debited or credited.
    #[serde(rename = "account_id")]
    pub account_id: String,
    /// Specify the account used to fund the transfer. Customers can find a list of `funding_account_id`s in the Accounts page of your Plaid Dashboard, under the \"Account ID\" column. If this field is left blank, it will default to the default `funding_account_id` specified during onboarding.
    #[serde(rename = "funding_account_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub funding_account_id: Option<Option<String>>,
    #[serde(rename = "type")]
    pub r#type: crate::models::TransferType,
    #[serde(rename = "network")]
    pub network: crate::models::TransferRecurringNetwork,
    #[serde(rename = "ach_class", skip_serializing_if = "Option::is_none")]
    pub ach_class: Option<crate::models::AchClass>,
    /// The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\"). When calling `/transfer/authorization/create`, specify the maximum amount to authorize. When calling `/transfer/create`, specify the exact amount of the transfer, up to a maximum of the amount authorized. If this field is left blank when calling `/transfer/create`, the maximum amount authorized in the `authorization_id` will be sent.
    #[serde(rename = "amount")]
    pub amount: String,
    /// If the end user is initiating the specific transfer themselves via an interactive UI, this should be `true`; for automatic recurring payments where the end user is not actually initiating each individual transfer, it should be `false`.
    #[serde(rename = "user_present", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user_present: Option<Option<bool>>,
    /// The currency of the transfer amount. The default value is \"USD\".
    #[serde(rename = "iso_currency_code", skip_serializing_if = "Option::is_none")]
    pub iso_currency_code: Option<String>,
    /// The description of the recurring transfer.
    #[serde(rename = "description")]
    pub description: String,
    /// Plaidâ€™s unique identifier for a test clock. This field may only be used when using `sandbox` environment. If provided, the created `recurring_transfer` is associated with the `test_clock`. New originations are automatically generated when the associated `test_clock` advances.
    #[serde(rename = "test_clock_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub test_clock_id: Option<Option<String>>,
    #[serde(rename = "schedule")]
    pub schedule: Box<crate::models::TransferRecurringSchedule>,
    #[serde(rename = "user")]
    pub user: Box<crate::models::TransferUserInRequest>,
    #[serde(rename = "device", skip_serializing_if = "Option::is_none")]
    pub device: Option<crate::models::TransferDevice>,
}

impl TransferRecurringCreateRequest {
    /// Defines the request schema for `/transfer/recurring/create`
    pub fn new(access_token: String, idempotency_key: String, account_id: String, r#type: crate::models::TransferType, network: crate::models::TransferRecurringNetwork, amount: String, description: String, schedule: crate::models::TransferRecurringSchedule, user: crate::models::TransferUserInRequest) -> TransferRecurringCreateRequest {
        TransferRecurringCreateRequest {
            client_id: None,
            secret: None,
            access_token,
            idempotency_key,
            account_id,
            funding_account_id: None,
            r#type,
            network,
            ach_class: None,
            amount,
            user_present: None,
            iso_currency_code: None,
            description,
            test_clock_id: None,
            schedule: Box::new(schedule),
            user: Box::new(user),
            device: None,
        }
    }
}


