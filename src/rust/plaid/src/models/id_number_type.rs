/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IdNumberType : A globally unique and human readable ID type, specific to the country and document category. For more context on this field, see [Hybrid Input Validation](https://plaid.com/docs/identity-verification/hybrid-input-validation).
/// A globally unique and human readable ID type, specific to the country and document category. For more context on this field, see [Hybrid Input Validation](https://plaid.com/docs/identity-verification/hybrid-input-validation).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IdNumberType {
    #[serde(rename = "ar_dni")]
    ArDni,
    #[serde(rename = "au_drivers_license")]
    AuDriversLicense,
    #[serde(rename = "au_passport")]
    AuPassport,
    #[serde(rename = "br_cpf")]
    BrCpf,
    #[serde(rename = "ca_sin")]
    CaSin,
    #[serde(rename = "cl_run")]
    ClRun,
    #[serde(rename = "cn_resident_card")]
    CnResidentCard,
    #[serde(rename = "co_nit")]
    CoNit,
    #[serde(rename = "dk_cpr")]
    DkCpr,
    #[serde(rename = "eg_national_id")]
    EgNationalId,
    #[serde(rename = "es_dni")]
    EsDni,
    #[serde(rename = "es_nie")]
    EsNie,
    #[serde(rename = "hk_hkid")]
    HkHkid,
    #[serde(rename = "in_pan")]
    InPan,
    #[serde(rename = "it_cf")]
    ItCf,
    #[serde(rename = "jo_civil_id")]
    JoCivilId,
    #[serde(rename = "jp_my_number")]
    JpMyNumber,
    #[serde(rename = "ke_huduma_namba")]
    KeHudumaNamba,
    #[serde(rename = "kw_civil_id")]
    KwCivilId,
    #[serde(rename = "mx_curp")]
    MxCurp,
    #[serde(rename = "mx_rfc")]
    MxRfc,
    #[serde(rename = "my_nric")]
    MyNric,
    #[serde(rename = "ng_nin")]
    NgNin,
    #[serde(rename = "nz_drivers_license")]
    NzDriversLicense,
    #[serde(rename = "om_civil_id")]
    OmCivilId,
    #[serde(rename = "ph_psn")]
    PhPsn,
    #[serde(rename = "pl_pesel")]
    PlPesel,
    #[serde(rename = "ro_cnp")]
    RoCnp,
    #[serde(rename = "sa_national_id")]
    SaNationalId,
    #[serde(rename = "se_pin")]
    SePin,
    #[serde(rename = "sg_nric")]
    SgNric,
    #[serde(rename = "tr_tc_kimlik")]
    TrTcKimlik,
    #[serde(rename = "us_ssn")]
    UsSsn,
    #[serde(rename = "us_ssn_last_4")]
    UsSsnLast4,
    #[serde(rename = "za_smart_id")]
    ZaSmartId,

}

impl std::fmt::Display for IdNumberType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::ArDni => write!(f, "ar_dni"),
            Self::AuDriversLicense => write!(f, "au_drivers_license"),
            Self::AuPassport => write!(f, "au_passport"),
            Self::BrCpf => write!(f, "br_cpf"),
            Self::CaSin => write!(f, "ca_sin"),
            Self::ClRun => write!(f, "cl_run"),
            Self::CnResidentCard => write!(f, "cn_resident_card"),
            Self::CoNit => write!(f, "co_nit"),
            Self::DkCpr => write!(f, "dk_cpr"),
            Self::EgNationalId => write!(f, "eg_national_id"),
            Self::EsDni => write!(f, "es_dni"),
            Self::EsNie => write!(f, "es_nie"),
            Self::HkHkid => write!(f, "hk_hkid"),
            Self::InPan => write!(f, "in_pan"),
            Self::ItCf => write!(f, "it_cf"),
            Self::JoCivilId => write!(f, "jo_civil_id"),
            Self::JpMyNumber => write!(f, "jp_my_number"),
            Self::KeHudumaNamba => write!(f, "ke_huduma_namba"),
            Self::KwCivilId => write!(f, "kw_civil_id"),
            Self::MxCurp => write!(f, "mx_curp"),
            Self::MxRfc => write!(f, "mx_rfc"),
            Self::MyNric => write!(f, "my_nric"),
            Self::NgNin => write!(f, "ng_nin"),
            Self::NzDriversLicense => write!(f, "nz_drivers_license"),
            Self::OmCivilId => write!(f, "om_civil_id"),
            Self::PhPsn => write!(f, "ph_psn"),
            Self::PlPesel => write!(f, "pl_pesel"),
            Self::RoCnp => write!(f, "ro_cnp"),
            Self::SaNationalId => write!(f, "sa_national_id"),
            Self::SePin => write!(f, "se_pin"),
            Self::SgNric => write!(f, "sg_nric"),
            Self::TrTcKimlik => write!(f, "tr_tc_kimlik"),
            Self::UsSsn => write!(f, "us_ssn"),
            Self::UsSsnLast4 => write!(f, "us_ssn_last_4"),
            Self::ZaSmartId => write!(f, "za_smart_id"),
        }
    }
}

impl Default for IdNumberType {
    fn default() -> IdNumberType {
        Self::ArDni
    }
}

