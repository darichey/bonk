/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ConsumerDispute : The information about a previously submitted valid dispute statement by the consumer
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConsumerDispute {
    /// A unique identifier (UUID) of the consumer dispute that can be used for troubleshooting
    #[serde(rename = "consumer_dispute_id")]
    pub consumer_dispute_id: String,
    /// Date of the disputed field (e.g. transaction date), in an ISO 8601 format (YYYY-MM-DD)
    #[serde(rename = "dispute_field_create_date")]
    pub dispute_field_create_date: String,
    #[serde(rename = "category")]
    pub category: models::ConsumerDisputeCategory,
    /// Text content of dispute
    #[serde(rename = "statement")]
    pub statement: String,
}

impl ConsumerDispute {
    /// The information about a previously submitted valid dispute statement by the consumer
    pub fn new(consumer_dispute_id: String, dispute_field_create_date: String, category: models::ConsumerDisputeCategory, statement: String) -> ConsumerDispute {
        ConsumerDispute {
            consumer_dispute_id,
            dispute_field_create_date,
            category,
            statement,
        }
    }
}

