/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.482.3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// RecurringInsightsStream : Insights object for recurring transactions streams.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecurringInsightsStream {
    /// A unique id for the stream.
    #[serde(rename = "stream_id")]
    pub stream_id: String,
    /// The client-provided raw description of the most recent transaction in the stream.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The merchant or primary counterparty associated with the transaction stream.
    #[serde(rename = "merchant_name")]
    pub merchant_name: String,
    /// The posted date of the earliest transaction in the stream.
    #[serde(rename = "oldest_transaction_date", skip_serializing_if = "Option::is_none")]
    pub oldest_transaction_date: Option<String>,
    /// The posted date of the latest transaction in the stream.
    #[serde(rename = "newest_transaction_date", skip_serializing_if = "Option::is_none")]
    pub newest_transaction_date: Option<String>,
    /// The average number of days between each of the recurring transactions.
    #[serde(rename = "average_days_apart")]
    pub average_days_apart: f64,
    #[serde(rename = "frequency", skip_serializing_if = "Option::is_none")]
    pub frequency: Option<crate::models::RecurringTransactionFrequency>,
    /// The number of transactions in this stream.
    #[serde(rename = "transaction_count", skip_serializing_if = "Option::is_none")]
    pub transaction_count: Option<i32>,
    /// An array of Plaid transaction IDs belonging to the stream, sorted by posted date.
    #[serde(rename = "transaction_ids", skip_serializing_if = "Option::is_none")]
    pub transaction_ids: Option<Vec<String>>,
    #[serde(rename = "average_amount", skip_serializing_if = "Option::is_none")]
    pub average_amount: Option<crate::models::TransactionStreamAmount>,
    #[serde(rename = "newest_transaction_amount", skip_serializing_if = "Option::is_none")]
    pub newest_transaction_amount: Option<crate::models::TransactionStreamAmount>,
    /// Indicates whether the transaction stream is still live.
    #[serde(rename = "is_active")]
    pub is_active: bool,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<crate::models::TransactionStreamStatus>,
    /// The primary category associated with the transaction stream.
    #[serde(rename = "personal_finance_category_primary", skip_serializing_if = "Option::is_none")]
    pub personal_finance_category_primary: Option<String>,
    /// The detailed category associated with the transaction stream.
    #[serde(rename = "personal_finance_category_detailed", skip_serializing_if = "Option::is_none")]
    pub personal_finance_category_detailed: Option<String>,
}

impl RecurringInsightsStream {
    /// Insights object for recurring transactions streams.
    pub fn new(stream_id: String, merchant_name: String, average_days_apart: f64, is_active: bool) -> RecurringInsightsStream {
        RecurringInsightsStream {
            stream_id,
            description: None,
            merchant_name,
            oldest_transaction_date: None,
            newest_transaction_date: None,
            average_days_apart,
            frequency: None,
            transaction_count: None,
            transaction_ids: None,
            average_amount: None,
            newest_transaction_amount: None,
            is_active,
            status: None,
            personal_finance_category_primary: None,
            personal_finance_category_detailed: None,
        }
    }
}


