/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TransactionAllOf {
    /// The date that the transaction was authorized. For posted transactions, the `date` field will indicate the posted date, but `authorized_date` will indicate the day the transaction was authorized by the financial institution. If presenting transactions to the user in a UI, the `authorized_date`, when available, is generally preferable to use over the `date` field for posted transactions, as it will generally represent the date the user actually made the transaction. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
    #[serde(rename = "authorized_date", deserialize_with = "Option::deserialize")]
    pub authorized_date: Option<String>,
    /// Date and time when a transaction was authorized in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ). For posted transactions, the `datetime` field will indicate the posted date, but `authorized_datetime` will indicate the day the transaction was authorized by the financial institution. If presenting transactions to the user in a UI, the `authorized_datetime`, when available, is generally preferable to use over the `datetime` field for posted transactions, as it will generally represent the date the user actually made the transaction.  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
    #[serde(rename = "authorized_datetime", deserialize_with = "Option::deserialize")]
    pub authorized_datetime: Option<String>,
    /// Date and time when a transaction was posted in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ). For the date that the transaction was initiated, rather than posted, see the `authorized_datetime` field.  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
    #[serde(rename = "datetime", deserialize_with = "Option::deserialize")]
    pub datetime: Option<String>,
    /// The channel used to make a payment. `online:` transactions that took place online.  `in store:` transactions that were made at a physical location.  `other:` transactions that relate to banks, e.g. fees or deposits.  This field replaces the `transaction_type` field. 
    #[serde(rename = "payment_channel")]
    pub payment_channel: PaymentChannel,
    #[serde(rename = "personal_finance_category", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub personal_finance_category: Option<Option<crate::models::PersonalFinanceCategory>>,
    #[serde(rename = "transaction_code", deserialize_with = "Option::deserialize")]
    pub transaction_code: Option<crate::models::TransactionCode>,
    /// The URL of an icon associated with the primary personal finance category. The icon will always be 100Ã—100 pixel PNG file.
    #[serde(rename = "personal_finance_category_icon_url", skip_serializing_if = "Option::is_none")]
    pub personal_finance_category_icon_url: Option<String>,
    /// The counterparties present in the transaction. Counterparties, such as the merchant or the financial institution, are extracted by Plaid from the raw description.
    #[serde(rename = "counterparties", skip_serializing_if = "Option::is_none")]
    pub counterparties: Option<Vec<crate::models::TransactionCounterparty>>,
    /// A unique, stable, Plaid-generated ID that maps to the merchant. In the case of a merchant with multiple retail locations, this field will map to the broader merchant, not a specific location or store.
    #[serde(rename = "merchant_entity_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub merchant_entity_id: Option<Option<String>>,
}

impl TransactionAllOf {
    pub fn new(authorized_date: Option<String>, authorized_datetime: Option<String>, datetime: Option<String>, payment_channel: PaymentChannel, transaction_code: Option<crate::models::TransactionCode>) -> TransactionAllOf {
        TransactionAllOf {
            authorized_date,
            authorized_datetime,
            datetime,
            payment_channel,
            personal_finance_category: None,
            transaction_code,
            personal_finance_category_icon_url: None,
            counterparties: None,
            merchant_entity_id: None,
        }
    }
}

/// The channel used to make a payment. `online:` transactions that took place online.  `in store:` transactions that were made at a physical location.  `other:` transactions that relate to banks, e.g. fees or deposits.  This field replaces the `transaction_type` field. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PaymentChannel {
    #[serde(rename = "online")]
    Online,
    #[serde(rename = "in store")]
    InStore,
    #[serde(rename = "other")]
    Other,
}

impl Default for PaymentChannel {
    fn default() -> PaymentChannel {
        Self::Online
    }
}

