/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// InvestmentTransactionSubtype : For descriptions of possible transaction types and subtypes, see the [Investment transaction types schema](https://plaid.com/docs/api/accounts/#investment-transaction-types-schema).
/// For descriptions of possible transaction types and subtypes, see the [Investment transaction types schema](https://plaid.com/docs/api/accounts/#investment-transaction-types-schema).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InvestmentTransactionSubtype {
    #[serde(rename = "account fee")]
    AccountFee,
    #[serde(rename = "adjustment")]
    Adjustment,
    #[serde(rename = "assignment")]
    Assignment,
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "buy to cover")]
    BuyToCover,
    #[serde(rename = "contribution")]
    Contribution,
    #[serde(rename = "deposit")]
    Deposit,
    #[serde(rename = "distribution")]
    Distribution,
    #[serde(rename = "dividend")]
    Dividend,
    #[serde(rename = "dividend reinvestment")]
    DividendReinvestment,
    #[serde(rename = "exercise")]
    Exercise,
    #[serde(rename = "expire")]
    Expire,
    #[serde(rename = "fund fee")]
    FundFee,
    #[serde(rename = "interest")]
    Interest,
    #[serde(rename = "interest receivable")]
    InterestReceivable,
    #[serde(rename = "interest reinvestment")]
    InterestReinvestment,
    #[serde(rename = "legal fee")]
    LegalFee,
    #[serde(rename = "loan payment")]
    LoanPayment,
    #[serde(rename = "long-term capital gain")]
    LongTermCapitalGain,
    #[serde(rename = "long-term capital gain reinvestment")]
    LongTermCapitalGainReinvestment,
    #[serde(rename = "management fee")]
    ManagementFee,
    #[serde(rename = "margin expense")]
    MarginExpense,
    #[serde(rename = "merger")]
    Merger,
    #[serde(rename = "miscellaneous fee")]
    MiscellaneousFee,
    #[serde(rename = "non-qualified dividend")]
    NonQualifiedDividend,
    #[serde(rename = "non-resident tax")]
    NonResidentTax,
    #[serde(rename = "pending credit")]
    PendingCredit,
    #[serde(rename = "pending debit")]
    PendingDebit,
    #[serde(rename = "qualified dividend")]
    QualifiedDividend,
    #[serde(rename = "rebalance")]
    Rebalance,
    #[serde(rename = "return of principal")]
    ReturnOfPrincipal,
    #[serde(rename = "request")]
    Request,
    #[serde(rename = "sell")]
    Sell,
    #[serde(rename = "sell short")]
    SellShort,
    #[serde(rename = "send")]
    Send,
    #[serde(rename = "short-term capital gain")]
    ShortTermCapitalGain,
    #[serde(rename = "short-term capital gain reinvestment")]
    ShortTermCapitalGainReinvestment,
    #[serde(rename = "spin off")]
    SpinOff,
    #[serde(rename = "split")]
    Split,
    #[serde(rename = "stock distribution")]
    StockDistribution,
    #[serde(rename = "tax")]
    Tax,
    #[serde(rename = "tax withheld")]
    TaxWithheld,
    #[serde(rename = "trade")]
    Trade,
    #[serde(rename = "transfer")]
    Transfer,
    #[serde(rename = "transfer fee")]
    TransferFee,
    #[serde(rename = "trust fee")]
    TrustFee,
    #[serde(rename = "unqualified gain")]
    UnqualifiedGain,
    #[serde(rename = "withdrawal")]
    Withdrawal,

}

impl std::fmt::Display for InvestmentTransactionSubtype {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::AccountFee => write!(f, "account fee"),
            Self::Adjustment => write!(f, "adjustment"),
            Self::Assignment => write!(f, "assignment"),
            Self::Buy => write!(f, "buy"),
            Self::BuyToCover => write!(f, "buy to cover"),
            Self::Contribution => write!(f, "contribution"),
            Self::Deposit => write!(f, "deposit"),
            Self::Distribution => write!(f, "distribution"),
            Self::Dividend => write!(f, "dividend"),
            Self::DividendReinvestment => write!(f, "dividend reinvestment"),
            Self::Exercise => write!(f, "exercise"),
            Self::Expire => write!(f, "expire"),
            Self::FundFee => write!(f, "fund fee"),
            Self::Interest => write!(f, "interest"),
            Self::InterestReceivable => write!(f, "interest receivable"),
            Self::InterestReinvestment => write!(f, "interest reinvestment"),
            Self::LegalFee => write!(f, "legal fee"),
            Self::LoanPayment => write!(f, "loan payment"),
            Self::LongTermCapitalGain => write!(f, "long-term capital gain"),
            Self::LongTermCapitalGainReinvestment => write!(f, "long-term capital gain reinvestment"),
            Self::ManagementFee => write!(f, "management fee"),
            Self::MarginExpense => write!(f, "margin expense"),
            Self::Merger => write!(f, "merger"),
            Self::MiscellaneousFee => write!(f, "miscellaneous fee"),
            Self::NonQualifiedDividend => write!(f, "non-qualified dividend"),
            Self::NonResidentTax => write!(f, "non-resident tax"),
            Self::PendingCredit => write!(f, "pending credit"),
            Self::PendingDebit => write!(f, "pending debit"),
            Self::QualifiedDividend => write!(f, "qualified dividend"),
            Self::Rebalance => write!(f, "rebalance"),
            Self::ReturnOfPrincipal => write!(f, "return of principal"),
            Self::Request => write!(f, "request"),
            Self::Sell => write!(f, "sell"),
            Self::SellShort => write!(f, "sell short"),
            Self::Send => write!(f, "send"),
            Self::ShortTermCapitalGain => write!(f, "short-term capital gain"),
            Self::ShortTermCapitalGainReinvestment => write!(f, "short-term capital gain reinvestment"),
            Self::SpinOff => write!(f, "spin off"),
            Self::Split => write!(f, "split"),
            Self::StockDistribution => write!(f, "stock distribution"),
            Self::Tax => write!(f, "tax"),
            Self::TaxWithheld => write!(f, "tax withheld"),
            Self::Trade => write!(f, "trade"),
            Self::Transfer => write!(f, "transfer"),
            Self::TransferFee => write!(f, "transfer fee"),
            Self::TrustFee => write!(f, "trust fee"),
            Self::UnqualifiedGain => write!(f, "unqualified gain"),
            Self::Withdrawal => write!(f, "withdrawal"),
        }
    }
}

impl Default for InvestmentTransactionSubtype {
    fn default() -> InvestmentTransactionSubtype {
        Self::AccountFee
    }
}

