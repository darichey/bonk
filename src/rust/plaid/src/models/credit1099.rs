/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Credit1099 : An object representing an end user's 1099 tax form



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Credit1099 {
    /// An identifier of the document referenced by the document metadata.
    #[serde(rename = "document_id", deserialize_with = "Option::deserialize")]
    pub document_id: Option<String>,
    #[serde(rename = "document_metadata", skip_serializing_if = "Option::is_none")]
    pub document_metadata: Option<crate::models::CreditDocumentMetadata>,
    #[serde(rename = "form_1099_type", skip_serializing_if = "Option::is_none")]
    pub form_1099_type: Option<crate::models::Form1099Type>,
    #[serde(rename = "recipient", skip_serializing_if = "Option::is_none")]
    pub recipient: Option<crate::models::Credit1099Recipient>,
    #[serde(rename = "payer", skip_serializing_if = "Option::is_none")]
    pub payer: Option<crate::models::Credit1099Payer>,
    #[serde(rename = "filer", skip_serializing_if = "Option::is_none")]
    pub filer: Option<crate::models::Credit1099Filer>,
    /// Tax year of the tax form.
    #[serde(rename = "tax_year", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tax_year: Option<Option<String>>,
    /// Amount in rent by payer.
    #[serde(rename = "rents", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rents: Option<Option<f64>>,
    /// Amount in royalties by payer.
    #[serde(rename = "royalties", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub royalties: Option<Option<f64>>,
    /// Amount in other income by payer.
    #[serde(rename = "other_income", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub other_income: Option<Option<f64>>,
    /// Amount of federal income tax withheld from payer.
    #[serde(rename = "federal_income_tax_withheld", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub federal_income_tax_withheld: Option<Option<f64>>,
    /// Amount of fishing boat proceeds from payer.
    #[serde(rename = "fishing_boat_proceeds", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fishing_boat_proceeds: Option<Option<f64>>,
    /// Amount of medical and healthcare payments from payer.
    #[serde(rename = "medical_and_healthcare_payments", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub medical_and_healthcare_payments: Option<Option<f64>>,
    /// Amount of nonemployee compensation from payer.
    #[serde(rename = "nonemployee_compensation", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub nonemployee_compensation: Option<Option<f64>>,
    /// Amount of substitute payments made by payer.
    #[serde(rename = "substitute_payments_in_lieu_of_dividends_or_interest", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub substitute_payments_in_lieu_of_dividends_or_interest: Option<Option<f64>>,
    /// Whether or not payer made direct sales over $5000 of consumer products.
    #[serde(rename = "payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer: Option<Option<String>>,
    /// Amount of crop insurance proceeds.
    #[serde(rename = "crop_insurance_proceeds", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub crop_insurance_proceeds: Option<Option<f64>>,
    /// Amount of golden parachute payments made by payer.
    #[serde(rename = "excess_golden_parachute_payments", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub excess_golden_parachute_payments: Option<Option<f64>>,
    /// Amount of gross proceeds paid to an attorney by payer.
    #[serde(rename = "gross_proceeds_paid_to_an_attorney", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gross_proceeds_paid_to_an_attorney: Option<Option<f64>>,
    /// Amount of 409A deferrals earned by payer.
    #[serde(rename = "section_409a_deferrals", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub section_409a_deferrals: Option<Option<f64>>,
    /// Amount of 409A income earned by payer.
    #[serde(rename = "section_409a_income", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub section_409a_income: Option<Option<f64>>,
    /// Amount of state tax withheld of payer for primary state.
    #[serde(rename = "state_tax_withheld", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub state_tax_withheld: Option<Option<f64>>,
    /// Amount of state tax withheld of payer for secondary state.
    #[serde(rename = "state_tax_withheld_lower", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub state_tax_withheld_lower: Option<Option<f64>>,
    /// Primary state ID.
    #[serde(rename = "payer_state_number", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub payer_state_number: Option<Option<String>>,
    /// Secondary state ID.
    #[serde(rename = "payer_state_number_lower", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub payer_state_number_lower: Option<Option<String>>,
    /// State income reported for primary state.
    #[serde(rename = "state_income", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub state_income: Option<Option<f64>>,
    /// State income reported for secondary state.
    #[serde(rename = "state_income_lower", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub state_income_lower: Option<Option<f64>>,
    /// One of the values will be provided Payment card Third party network
    #[serde(rename = "transactions_reported", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub transactions_reported: Option<Option<String>>,
    /// Name of the PSE (Payment Settlement Entity).
    #[serde(rename = "pse_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pse_name: Option<Option<String>>,
    /// Formatted (XXX) XXX-XXXX. Phone number of the PSE (Payment Settlement Entity).
    #[serde(rename = "pse_telephone_number", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pse_telephone_number: Option<Option<String>>,
    /// Gross amount reported.
    #[serde(rename = "gross_amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gross_amount: Option<Option<f64>>,
    /// Amount in card not present transactions.
    #[serde(rename = "card_not_present_transaction", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub card_not_present_transaction: Option<Option<f64>>,
    /// Merchant category of filer.
    #[serde(rename = "merchant_category_code", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub merchant_category_code: Option<Option<String>>,
    /// Number of payment transactions made.
    #[serde(rename = "number_of_payment_transactions", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub number_of_payment_transactions: Option<Option<String>>,
    /// Amount reported for January.
    #[serde(rename = "january_amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub january_amount: Option<Option<f64>>,
    /// Amount reported for February.
    #[serde(rename = "february_amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub february_amount: Option<Option<f64>>,
    /// Amount reported for March.
    #[serde(rename = "march_amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub march_amount: Option<Option<f64>>,
    /// Amount reported for April.
    #[serde(rename = "april_amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub april_amount: Option<Option<f64>>,
    /// Amount reported for May.
    #[serde(rename = "may_amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub may_amount: Option<Option<f64>>,
    /// Amount reported for June.
    #[serde(rename = "june_amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub june_amount: Option<Option<f64>>,
    /// Amount reported for July.
    #[serde(rename = "july_amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub july_amount: Option<Option<f64>>,
    /// Amount reported for August.
    #[serde(rename = "august_amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub august_amount: Option<Option<f64>>,
    /// Amount reported for September.
    #[serde(rename = "september_amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub september_amount: Option<Option<f64>>,
    /// Amount reported for October.
    #[serde(rename = "october_amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub october_amount: Option<Option<f64>>,
    /// Amount reported for November.
    #[serde(rename = "november_amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub november_amount: Option<Option<f64>>,
    /// Amount reported for December.
    #[serde(rename = "december_amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub december_amount: Option<Option<f64>>,
    /// Primary state of business.
    #[serde(rename = "primary_state", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub primary_state: Option<Option<String>>,
    /// Secondary state of business.
    #[serde(rename = "secondary_state", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub secondary_state: Option<Option<String>>,
    /// Primary state ID.
    #[serde(rename = "primary_state_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub primary_state_id: Option<Option<String>>,
    /// Secondary state ID.
    #[serde(rename = "secondary_state_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub secondary_state_id: Option<Option<String>>,
    /// State income tax reported for primary state.
    #[serde(rename = "primary_state_income_tax", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub primary_state_income_tax: Option<Option<f64>>,
    /// State income tax reported for secondary state.
    #[serde(rename = "secondary_state_income_tax", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub secondary_state_income_tax: Option<Option<f64>>,
}

impl Credit1099 {
    /// An object representing an end user's 1099 tax form
    pub fn new(document_id: Option<String>) -> Credit1099 {
        Credit1099 {
            document_id,
            document_metadata: None,
            form_1099_type: None,
            recipient: None,
            payer: None,
            filer: None,
            tax_year: None,
            rents: None,
            royalties: None,
            other_income: None,
            federal_income_tax_withheld: None,
            fishing_boat_proceeds: None,
            medical_and_healthcare_payments: None,
            nonemployee_compensation: None,
            substitute_payments_in_lieu_of_dividends_or_interest: None,
            payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer: None,
            crop_insurance_proceeds: None,
            excess_golden_parachute_payments: None,
            gross_proceeds_paid_to_an_attorney: None,
            section_409a_deferrals: None,
            section_409a_income: None,
            state_tax_withheld: None,
            state_tax_withheld_lower: None,
            payer_state_number: None,
            payer_state_number_lower: None,
            state_income: None,
            state_income_lower: None,
            transactions_reported: None,
            pse_name: None,
            pse_telephone_number: None,
            gross_amount: None,
            card_not_present_transaction: None,
            merchant_category_code: None,
            number_of_payment_transactions: None,
            january_amount: None,
            february_amount: None,
            march_amount: None,
            april_amount: None,
            may_amount: None,
            june_amount: None,
            july_amount: None,
            august_amount: None,
            september_amount: None,
            october_amount: None,
            november_amount: None,
            december_amount: None,
            primary_state: None,
            secondary_state: None,
            primary_state_id: None,
            secondary_state_id: None,
            primary_state_income_tax: None,
            secondary_state_income_tax: None,
        }
    }
}


