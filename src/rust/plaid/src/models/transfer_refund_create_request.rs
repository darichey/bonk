/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// TransferRefundCreateRequest : Defines the request schema for `/transfer/refund/create`



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TransferRefundCreateRequest {
    /// Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    #[serde(rename = "client_id", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    /// Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    #[serde(rename = "secret", skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// The ID of the transfer to refund.
    #[serde(rename = "transfer_id")]
    pub transfer_id: String,
    /// The amount of the refund (decimal string with two digits of precision e.g. \"10.00\").
    #[serde(rename = "amount")]
    pub amount: String,
    /// A random key provided by the client, per unique refund. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a refund fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single refund is created.
    #[serde(rename = "idempotency_key")]
    pub idempotency_key: String,
}

impl TransferRefundCreateRequest {
    /// Defines the request schema for `/transfer/refund/create`
    pub fn new(transfer_id: String, amount: String, idempotency_key: String) -> TransferRefundCreateRequest {
        TransferRefundCreateRequest {
            client_id: None,
            secret: None,
            transfer_id,
            amount,
            idempotency_key,
        }
    }
}


