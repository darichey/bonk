/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PaymentInitiationPaymentGetResponse : PaymentInitiationPaymentGetResponse defines the response schema for `/payment_initation/payment/get`
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PaymentInitiationPaymentGetResponse {
    /// The ID of the payment. Like all Plaid identifiers, the `payment_id` is case sensitive.
    #[serde(rename = "payment_id")]
    pub payment_id: String,
    #[serde(rename = "amount")]
    pub amount: Box<models::PaymentAmount>,
    #[serde(rename = "status")]
    pub status: models::PaymentInitiationPaymentStatus,
    /// The ID of the recipient
    #[serde(rename = "recipient_id")]
    pub recipient_id: String,
    /// A reference for the payment.
    #[serde(rename = "reference")]
    pub reference: String,
    /// The value of the reference sent to the bank after adjustment to pass bank validation rules.
    #[serde(rename = "adjusted_reference", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub adjusted_reference: Option<Option<String>>,
    /// The date and time of the last time the `status` was updated, in IS0 8601 format
    #[serde(rename = "last_status_update")]
    pub last_status_update: String,
    #[serde(rename = "schedule", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub schedule: Option<Option<Box<models::ExternalPaymentScheduleGet>>>,
    #[serde(rename = "refund_details", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub refund_details: Option<Option<Box<models::ExternalPaymentRefundDetails>>>,
    #[serde(rename = "bacs", deserialize_with = "Option::deserialize")]
    pub bacs: Option<Box<models::SenderBacsNullable>>,
    /// The International Bank Account Number (IBAN) for the sender, if specified in the `/payment_initiation/payment/create` call.
    #[serde(rename = "iban", deserialize_with = "Option::deserialize")]
    pub iban: Option<String>,
    /// Refund IDs associated with the payment.
    #[serde(rename = "refund_ids", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub refund_ids: Option<Option<Vec<String>>>,
    #[serde(rename = "amount_refunded", skip_serializing_if = "Option::is_none")]
    pub amount_refunded: Option<Box<models::PaymentAmountRefunded>>,
    /// The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.
    #[serde(rename = "wallet_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub wallet_id: Option<Option<String>>,
    #[serde(rename = "scheme", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub scheme: Option<Option<models::PaymentScheme>>,
    #[serde(rename = "adjusted_scheme", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub adjusted_scheme: Option<Option<models::PaymentScheme>>,
    /// The payment consent ID that this payment was initiated with. Is present only when payment was initiated using the payment consent.
    #[serde(rename = "consent_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub consent_id: Option<Option<String>>,
    /// The transaction ID that this payment is associated with, if any. This is present only when a payment was initiated using virtual accounts.
    #[serde(rename = "transaction_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub transaction_id: Option<Option<String>>,
    /// A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
    #[serde(rename = "request_id")]
    pub request_id: String,
}

impl PaymentInitiationPaymentGetResponse {
    /// PaymentInitiationPaymentGetResponse defines the response schema for `/payment_initation/payment/get`
    pub fn new(payment_id: String, amount: models::PaymentAmount, status: models::PaymentInitiationPaymentStatus, recipient_id: String, reference: String, last_status_update: String, bacs: Option<models::SenderBacsNullable>, iban: Option<String>, request_id: String) -> PaymentInitiationPaymentGetResponse {
        PaymentInitiationPaymentGetResponse {
            payment_id,
            amount: Box::new(amount),
            status,
            recipient_id,
            reference,
            adjusted_reference: None,
            last_status_update,
            schedule: None,
            refund_details: None,
            bacs: if let Some(x) = bacs {Some(Box::new(x))} else {None},
            iban,
            refund_ids: None,
            amount_refunded: None,
            wallet_id: None,
            scheme: None,
            adjusted_scheme: None,
            consent_id: None,
            transaction_id: None,
            request_id,
        }
    }
}

