/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Transfer : Represents a transfer within the Transfers API.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Transfer {
    /// Plaid’s unique identifier for a transfer.
    #[serde(rename = "id")]
    pub id: String,
    /// Plaid’s unique identifier for a transfer authorization.
    #[serde(rename = "authorization_id")]
    pub authorization_id: String,
    #[serde(rename = "ach_class", skip_serializing_if = "Option::is_none")]
    pub ach_class: Option<crate::models::AchClass>,
    /// The Plaid `account_id` corresponding to the end-user account that will be debited or credited.
    #[serde(rename = "account_id", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    /// The id of the associated funding account, available in the Plaid Dashboard. If present, this indicates which of your business checking accounts will be credited or debited.
    #[serde(rename = "funding_account_id", deserialize_with = "Option::deserialize")]
    pub funding_account_id: Option<String>,
    /// Plaid’s unique identifier for a Plaid Ledger Balance.
    #[serde(rename = "ledger_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ledger_id: Option<Option<String>>,
    #[serde(rename = "type")]
    pub r#type: crate::models::TransferType,
    #[serde(rename = "user")]
    pub user: crate::models::TransferUserInResponse,
    /// The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\"). When calling `/transfer/authorization/create`, specify the maximum amount to authorize. When calling `/transfer/create`, specify the exact amount of the transfer, up to a maximum of the amount authorized. If this field is left blank when calling `/transfer/create`, the maximum amount authorized in the `authorization_id` will be sent.
    #[serde(rename = "amount")]
    pub amount: String,
    /// The description of the transfer.
    #[serde(rename = "description")]
    pub description: String,
    /// The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
    #[serde(rename = "created")]
    pub created: String,
    #[serde(rename = "status")]
    pub status: crate::models::TransferStatus,
    #[serde(rename = "sweep_status", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sweep_status: Option<Option<crate::models::TransferSweepStatus>>,
    #[serde(rename = "network")]
    pub network: crate::models::TransferNetwork,
    #[serde(rename = "wire_details", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub wire_details: Option<Option<Box<crate::models::TransferWireDetails>>>,
    /// When `true`, you can still cancel this transfer.
    #[serde(rename = "cancellable")]
    pub cancellable: bool,
    #[serde(rename = "failure_reason", deserialize_with = "Option::deserialize")]
    pub failure_reason: Option<crate::models::TransferFailure>,
    /// The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters 
    #[serde(rename = "metadata", deserialize_with = "Option::deserialize")]
    pub metadata: Option<::std::collections::HashMap<String, String>>,
    /// Plaid’s unique identifier for the origination account that was used for this transfer.
    #[serde(rename = "origination_account_id")]
    pub origination_account_id: String,
    #[serde(rename = "guarantee_decision", deserialize_with = "Option::deserialize")]
    pub guarantee_decision: Option<crate::models::TransferAuthorizationGuaranteeDecision>,
    #[serde(rename = "guarantee_decision_rationale", deserialize_with = "Option::deserialize")]
    pub guarantee_decision_rationale: Option<crate::models::TransferAuthorizationGuaranteeDecisionRationale>,
    /// The currency of the transfer amount, e.g. \"USD\"
    #[serde(rename = "iso_currency_code")]
    pub iso_currency_code: String,
    /// The date 3 business days from settlement date indicating the following ACH returns can no longer happen: R01, R02, R03, R29. This will be of the form YYYY-MM-DD.
    #[serde(rename = "standard_return_window", deserialize_with = "Option::deserialize")]
    pub standard_return_window: Option<String>,
    /// The date 61 business days from settlement date indicating the following ACH returns can no longer happen: R05, R07, R10, R11, R51, R33, R37, R38, R51, R52, R53. This will be of the form YYYY-MM-DD.
    #[serde(rename = "unauthorized_return_window", deserialize_with = "Option::deserialize")]
    pub unauthorized_return_window: Option<String>,
    /// The date when settlement will occur between Plaid and the receiving bank (RDFI). For ACH debits, this is the date funds will be pulled from the bank account being debited. For ACH credits, this is the date funds will be delivered to the bank account being credited. Only set for ACH transfers; `null` for non-ACH transfers. This will be of the form YYYY-MM-DD.
    #[serde(rename = "expected_settlement_date", deserialize_with = "Option::deserialize")]
    pub expected_settlement_date: Option<String>,
    /// The Plaid client ID that is the originator of this transfer. Only present if created on behalf of another client as a [Platform customer](https://plaid.com/docs/transfer/application/#originators-vs-platforms).
    #[serde(rename = "originator_client_id", deserialize_with = "Option::deserialize")]
    pub originator_client_id: Option<String>,
    /// A list of refunds associated with this transfer.
    #[serde(rename = "refunds")]
    pub refunds: Vec<crate::models::TransferRefund>,
    /// The id of the recurring transfer if this transfer belongs to a recurring transfer.
    #[serde(rename = "recurring_transfer_id", deserialize_with = "Option::deserialize")]
    pub recurring_transfer_id: Option<String>,
    /// The expected sweep settlement schedule of this transfer, assuming this transfer is not `returned`. Only applies to ACH debit transfers.
    #[serde(rename = "expected_sweep_settlement_schedule", skip_serializing_if = "Option::is_none")]
    pub expected_sweep_settlement_schedule: Option<Vec<crate::models::TransferExpectedSweepSettlementScheduleItem>>,
    #[serde(rename = "credit_funds_source", deserialize_with = "Option::deserialize")]
    pub credit_funds_source: Option<crate::models::TransferCreditFundsSource>,
    /// The amount to deduct from `transfer.amount` and distribute to the platform’s Ledger balance as a facilitator fee (decimal string with two digits of precision e.g. \"10.00\"). The remainder will go to the end-customer’s Ledger balance. This must be less than or equal to the `transfer.amount`.
    #[serde(rename = "facilitator_fee", skip_serializing_if = "Option::is_none")]
    pub facilitator_fee: Option<String>,
    /// The trace identifier for the transfer based on its network. This will only be set after the transfer has posted.  For `ach` or `same-day-ach` transfers, this is the ACH trace number. For `rtp` transfers, this is the Transaction Identification number. For `wire` transfers, this is the IMAD (Input Message Accountability Data) number.
    #[serde(rename = "network_trace_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub network_trace_id: Option<Option<String>>,
}

impl Transfer {
    /// Represents a transfer within the Transfers API.
    pub fn new(id: String, authorization_id: String, funding_account_id: Option<String>, r#type: crate::models::TransferType, user: crate::models::TransferUserInResponse, amount: String, description: String, created: String, status: crate::models::TransferStatus, network: crate::models::TransferNetwork, cancellable: bool, failure_reason: Option<crate::models::TransferFailure>, metadata: Option<::std::collections::HashMap<String, String>>, origination_account_id: String, guarantee_decision: Option<crate::models::TransferAuthorizationGuaranteeDecision>, guarantee_decision_rationale: Option<crate::models::TransferAuthorizationGuaranteeDecisionRationale>, iso_currency_code: String, standard_return_window: Option<String>, unauthorized_return_window: Option<String>, expected_settlement_date: Option<String>, originator_client_id: Option<String>, refunds: Vec<crate::models::TransferRefund>, recurring_transfer_id: Option<String>, credit_funds_source: Option<crate::models::TransferCreditFundsSource>) -> Transfer {
        Transfer {
            id,
            authorization_id,
            ach_class: None,
            account_id: None,
            funding_account_id,
            ledger_id: None,
            r#type,
            user,
            amount,
            description,
            created,
            status,
            sweep_status: None,
            network,
            wire_details: None,
            cancellable,
            failure_reason,
            metadata,
            origination_account_id,
            guarantee_decision,
            guarantee_decision_rationale,
            iso_currency_code,
            standard_return_window,
            unauthorized_return_window,
            expected_settlement_date,
            originator_client_id,
            refunds,
            recurring_transfer_id,
            expected_sweep_settlement_schedule: None,
            credit_funds_source,
            facilitator_fee: None,
            network_trace_id: None,
        }
    }
}


