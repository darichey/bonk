/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OverrideAccounts : Data to use to set values of test accounts. Some values cannot be specified in the schema and will instead will be calculated from other test data in order to achieve more consistent, realistic test data.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OverrideAccounts {
    #[serde(rename = "type")]
    pub r#type: models::OverrideAccountType,
    #[serde(rename = "subtype", deserialize_with = "Option::deserialize")]
    pub subtype: Option<models::AccountSubtype>,
    /// If provided, the account will start with this amount as the current balance. 
    #[serde(rename = "starting_balance")]
    pub starting_balance: f64,
    /// If provided, the account will always have this amount as its  available balance, regardless of current balance or changes in transactions over time.
    #[serde(rename = "force_available_balance")]
    pub force_available_balance: f64,
    /// ISO-4217 currency code. If provided, the account will be denominated in the given currency. Transactions will also be in this currency by default.
    #[serde(rename = "currency")]
    pub currency: String,
    #[serde(rename = "meta")]
    pub meta: models::Meta,
    #[serde(rename = "numbers")]
    pub numbers: models::Numbers,
    /// Specify the list of transactions on the account.
    #[serde(rename = "transactions")]
    pub transactions: Vec<models::TransactionOverride>,
    #[serde(rename = "holdings", skip_serializing_if = "Option::is_none")]
    pub holdings: Option<Box<models::HoldingsOverride>>,
    #[serde(rename = "investment_transactions", skip_serializing_if = "Option::is_none")]
    pub investment_transactions: Option<Box<models::InvestmentsTransactionsOverride>>,
    #[serde(rename = "identity")]
    pub identity: models::OwnerOverride,
    #[serde(rename = "liability")]
    pub liability: models::LiabilityOverride,
    #[serde(rename = "inflow_model")]
    pub inflow_model: models::InflowModel,
    #[serde(rename = "income", skip_serializing_if = "Option::is_none")]
    pub income: Option<Box<models::IncomeOverride>>,
}

impl OverrideAccounts {
    /// Data to use to set values of test accounts. Some values cannot be specified in the schema and will instead will be calculated from other test data in order to achieve more consistent, realistic test data.
    pub fn new(r#type: models::OverrideAccountType, subtype: Option<models::AccountSubtype>, starting_balance: f64, force_available_balance: f64, currency: String, meta: models::Meta, numbers: models::Numbers, transactions: Vec<models::TransactionOverride>, identity: models::OwnerOverride, liability: models::LiabilityOverride, inflow_model: models::InflowModel) -> OverrideAccounts {
        OverrideAccounts {
            r#type,
            subtype,
            starting_balance,
            force_available_balance,
            currency,
            meta,
            numbers,
            transactions,
            holdings: None,
            investment_transactions: None,
            identity,
            liability,
            inflow_model,
            income: None,
        }
    }
}

