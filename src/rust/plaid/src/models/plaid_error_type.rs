/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// PlaidErrorType : A broad categorization of the error. Safe for programmatic use.

/// A broad categorization of the error. Safe for programmatic use.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PlaidErrorType {
    #[serde(rename = "INVALID_REQUEST")]
    InvalidRequest,
    #[serde(rename = "INVALID_RESULT")]
    InvalidResult,
    #[serde(rename = "INVALID_INPUT")]
    InvalidInput,
    #[serde(rename = "INSTITUTION_ERROR")]
    InstitutionError,
    #[serde(rename = "RATE_LIMIT_EXCEEDED")]
    RateLimitExceeded,
    #[serde(rename = "API_ERROR")]
    ApiError,
    #[serde(rename = "ITEM_ERROR")]
    ItemError,
    #[serde(rename = "ASSET_REPORT_ERROR")]
    AssetReportError,
    #[serde(rename = "RECAPTCHA_ERROR")]
    RecaptchaError,
    #[serde(rename = "OAUTH_ERROR")]
    OauthError,
    #[serde(rename = "PAYMENT_ERROR")]
    PaymentError,
    #[serde(rename = "BANK_TRANSFER_ERROR")]
    BankTransferError,
    #[serde(rename = "INCOME_VERIFICATION_ERROR")]
    IncomeVerificationError,
    #[serde(rename = "MICRODEPOSITS_ERROR")]
    MicrodepositsError,
    #[serde(rename = "SANDBOX_ERROR")]
    SandboxError,
    #[serde(rename = "PARTNER_ERROR")]
    PartnerError,
    #[serde(rename = "TRANSACTIONS_ERROR")]
    TransactionsError,
    #[serde(rename = "TRANSACTION_ERROR")]
    TransactionError,
    #[serde(rename = "TRANSFER_ERROR")]
    TransferError,

}

impl ToString for PlaidErrorType {
    fn to_string(&self) -> String {
        match self {
            Self::InvalidRequest => String::from("INVALID_REQUEST"),
            Self::InvalidResult => String::from("INVALID_RESULT"),
            Self::InvalidInput => String::from("INVALID_INPUT"),
            Self::InstitutionError => String::from("INSTITUTION_ERROR"),
            Self::RateLimitExceeded => String::from("RATE_LIMIT_EXCEEDED"),
            Self::ApiError => String::from("API_ERROR"),
            Self::ItemError => String::from("ITEM_ERROR"),
            Self::AssetReportError => String::from("ASSET_REPORT_ERROR"),
            Self::RecaptchaError => String::from("RECAPTCHA_ERROR"),
            Self::OauthError => String::from("OAUTH_ERROR"),
            Self::PaymentError => String::from("PAYMENT_ERROR"),
            Self::BankTransferError => String::from("BANK_TRANSFER_ERROR"),
            Self::IncomeVerificationError => String::from("INCOME_VERIFICATION_ERROR"),
            Self::MicrodepositsError => String::from("MICRODEPOSITS_ERROR"),
            Self::SandboxError => String::from("SANDBOX_ERROR"),
            Self::PartnerError => String::from("PARTNER_ERROR"),
            Self::TransactionsError => String::from("TRANSACTIONS_ERROR"),
            Self::TransactionError => String::from("TRANSACTION_ERROR"),
            Self::TransferError => String::from("TRANSFER_ERROR"),
        }
    }
}

impl Default for PlaidErrorType {
    fn default() -> PlaidErrorType {
        Self::InvalidRequest
    }
}




