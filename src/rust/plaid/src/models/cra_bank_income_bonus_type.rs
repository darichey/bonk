/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CraBankIncomeBonusType : The type of bonus that this transaction represents, if it is a bonus. `BONUS_INCLUDED`: Bonus is included in this transaction along with the normal pay `BONUS_ONLY`: This transaction is a standalone bonus
/// The type of bonus that this transaction represents, if it is a bonus. `BONUS_INCLUDED`: Bonus is included in this transaction along with the normal pay `BONUS_ONLY`: This transaction is a standalone bonus
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CraBankIncomeBonusType {
    #[serde(rename = "BONUS_INCLUDED")]
    BonusIncluded,
    #[serde(rename = "BONUS_ONLY")]
    BonusOnly,
    #[serde(rename = "null")]
    Null,

}

impl std::fmt::Display for CraBankIncomeBonusType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::BonusIncluded => write!(f, "BONUS_INCLUDED"),
            Self::BonusOnly => write!(f, "BONUS_ONLY"),
            Self::Null => write!(f, "null"),
        }
    }
}

impl Default for CraBankIncomeBonusType {
    fn default() -> CraBankIncomeBonusType {
        Self::BonusIncluded
    }
}

