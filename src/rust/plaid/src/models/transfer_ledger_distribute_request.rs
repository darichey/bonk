/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TransferLedgerDistributeRequest : Defines the request schema for `/transfer/ledger/distribute`
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransferLedgerDistributeRequest {
    /// Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    #[serde(rename = "client_id", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    /// Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    #[serde(rename = "secret", skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// The Ledger to pull money from.
    #[serde(rename = "from_ledger_id")]
    pub from_ledger_id: String,
    /// The Ledger to credit money to.
    #[serde(rename = "to_ledger_id")]
    pub to_ledger_id: String,
    /// The amount to move (decimal string with two digits of precision e.g. \"10.00\"). Amount must be positive.
    #[serde(rename = "amount")]
    pub amount: String,
    /// A unique key provided by the client, per unique ledger distribute. Maximum of 50 characters.  The API supports idempotency for safely retrying the request without accidentally performing the same operation twice. For example, if a request to create a ledger distribute fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single distribute is created.
    #[serde(rename = "idempotency_key")]
    pub idempotency_key: String,
    /// An optional description for the ledger distribute operation.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}

impl TransferLedgerDistributeRequest {
    /// Defines the request schema for `/transfer/ledger/distribute`
    pub fn new(from_ledger_id: String, to_ledger_id: String, amount: String, idempotency_key: String) -> TransferLedgerDistributeRequest {
        TransferLedgerDistributeRequest {
            client_id: None,
            secret: None,
            from_ledger_id,
            to_ledger_id,
            amount,
            idempotency_key,
            description: None,
        }
    }
}

