/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PaymentInitiationConsentPaymentExecuteRequest : PaymentInitiationConsentPaymentExecuteRequest defines the request schema for `/payment_initiation/consent/payment/execute`
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PaymentInitiationConsentPaymentExecuteRequest {
    /// Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    #[serde(rename = "client_id", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    /// Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    #[serde(rename = "secret", skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// The consent ID.
    #[serde(rename = "consent_id")]
    pub consent_id: String,
    #[serde(rename = "amount")]
    pub amount: Box<models::PaymentAmount>,
    /// A random key provided by the client, per unique consent payment. Maximum of 128 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a consent payment fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single payment is created. If the request was successfully processed, it will prevent any payment that uses the same idempotency key, and was received within 48 hours of the first request, from being processed.
    #[serde(rename = "idempotency_key")]
    pub idempotency_key: String,
    /// A reference for the payment. This must be an alphanumeric string with at most 18 characters and must not contain any special characters (since not all institutions support them). If not provided, Plaid will automatically fall back to the reference from consent. In order to track settlement via Payment Confirmation, each payment must have a unique reference. If the reference provided through the API is not unique, Plaid will adjust it. Some institutions may limit the reference to less than 18 characters. If necessary, Plaid will adjust the reference by truncating it to fit the institution's requirements. Both the originally provided and automatically adjusted references (if any) can be found in the `reference` and `adjusted_reference` fields, respectively.
    #[serde(rename = "reference", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reference: Option<Option<String>>,
    #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<Box<models::PaymentInitiationConsentScope>>,
    #[serde(rename = "processing_mode", skip_serializing_if = "Option::is_none")]
    pub processing_mode: Option<models::PaymentInitiationConsentProcessingMode>,
}

impl PaymentInitiationConsentPaymentExecuteRequest {
    /// PaymentInitiationConsentPaymentExecuteRequest defines the request schema for `/payment_initiation/consent/payment/execute`
    pub fn new(consent_id: String, amount: models::PaymentAmount, idempotency_key: String) -> PaymentInitiationConsentPaymentExecuteRequest {
        PaymentInitiationConsentPaymentExecuteRequest {
            client_id: None,
            secret: None,
            consent_id,
            amount: Box::new(amount),
            idempotency_key,
            reference: None,
            scope: None,
            processing_mode: None,
        }
    }
}

