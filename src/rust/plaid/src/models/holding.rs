/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Holding : A securities holding at an institution.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Holding {
    /// The Plaid `account_id` associated with the holding.
    #[serde(rename = "account_id")]
    pub account_id: String,
    /// The Plaid `security_id` associated with the holding. Security data is not specific to a user's account; any user who held the same security at the same financial institution at the same time would have identical security data. The `security_id` for the same security will typically be the same across different institutions, but this is not guaranteed. The `security_id` does not typically change, but may change if inherent details of the security change due to a corporate action, for example, in the event of a ticker symbol change or CUSIP change.
    #[serde(rename = "security_id")]
    pub security_id: String,
    /// The last price given by the institution for this security.
    #[serde(rename = "institution_price")]
    pub institution_price: f64,
    /// The date at which `institution_price` was current.
    #[serde(rename = "institution_price_as_of", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub institution_price_as_of: Option<Option<String>>,
    /// Date and time at which `institution_price` was current, in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). 
    #[serde(rename = "institution_price_datetime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub institution_price_datetime: Option<Option<String>>,
    /// The value of the holding, as reported by the institution.
    #[serde(rename = "institution_value")]
    pub institution_value: f64,
    /// The total cost basis of the holding (e.g., the total amount spent to acquire all assets currently in the holding).
    #[serde(rename = "cost_basis", deserialize_with = "Option::deserialize")]
    pub cost_basis: Option<f64>,
    /// The total quantity of the asset held, as reported by the financial institution. If the security is an option, `quantity` will reflect the total number of options (typically the number of contracts multiplied by 100), not the number of contracts.
    #[serde(rename = "quantity")]
    pub quantity: f64,
    /// The ISO-4217 currency code of the holding. Always `null` if `unofficial_currency_code` is non-`null`.
    #[serde(rename = "iso_currency_code", deserialize_with = "Option::deserialize")]
    pub iso_currency_code: Option<String>,
    /// The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s. 
    #[serde(rename = "unofficial_currency_code", deserialize_with = "Option::deserialize")]
    pub unofficial_currency_code: Option<String>,
    /// The total quantity of vested assets held, as reported by the financial institution. Vested assets are only associated with [equities](https://plaid.com/docs/api/products/investments/#investments-holdings-get-response-securities-type).
    #[serde(rename = "vested_quantity", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vested_quantity: Option<Option<f64>>,
    /// The value of the vested holdings as reported by the institution.
    #[serde(rename = "vested_value", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vested_value: Option<Option<f64>>,
}

impl Holding {
    /// A securities holding at an institution.
    pub fn new(account_id: String, security_id: String, institution_price: f64, institution_value: f64, cost_basis: Option<f64>, quantity: f64, iso_currency_code: Option<String>, unofficial_currency_code: Option<String>) -> Holding {
        Holding {
            account_id,
            security_id,
            institution_price,
            institution_price_as_of: None,
            institution_price_datetime: None,
            institution_value,
            cost_basis,
            quantity,
            iso_currency_code,
            unofficial_currency_code,
            vested_quantity: None,
            vested_value: None,
        }
    }
}

