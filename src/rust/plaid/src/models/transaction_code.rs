/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TransactionCode : An identifier classifying the transaction type.  This field is only populated for European institutions. For institutions in the US and Canada, this field is set to `null`.  `adjustment:` Bank adjustment  `atm:` Cash deposit or withdrawal via an automated teller machine  `bank charge:` Charge or fee levied by the institution  `bill payment`: Payment of a bill  `cash:` Cash deposit or withdrawal  `cashback:` Cash withdrawal while making a debit card purchase  `cheque:` Document ordering the payment of money to another person or organization  `direct debit:` Automatic withdrawal of funds initiated by a third party at a regular interval  `interest:` Interest earned or incurred  `purchase:` Purchase made with a debit or credit card  `standing order:` Payment instructed by the account holder to a third party at a regular interval  `transfer:` Transfer of money between accounts
/// An identifier classifying the transaction type.  This field is only populated for European institutions. For institutions in the US and Canada, this field is set to `null`.  `adjustment:` Bank adjustment  `atm:` Cash deposit or withdrawal via an automated teller machine  `bank charge:` Charge or fee levied by the institution  `bill payment`: Payment of a bill  `cash:` Cash deposit or withdrawal  `cashback:` Cash withdrawal while making a debit card purchase  `cheque:` Document ordering the payment of money to another person or organization  `direct debit:` Automatic withdrawal of funds initiated by a third party at a regular interval  `interest:` Interest earned or incurred  `purchase:` Purchase made with a debit or credit card  `standing order:` Payment instructed by the account holder to a third party at a regular interval  `transfer:` Transfer of money between accounts
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TransactionCode {
    #[serde(rename = "adjustment")]
    Adjustment,
    #[serde(rename = "atm")]
    Atm,
    #[serde(rename = "bank charge")]
    BankCharge,
    #[serde(rename = "bill payment")]
    BillPayment,
    #[serde(rename = "cash")]
    Cash,
    #[serde(rename = "cashback")]
    Cashback,
    #[serde(rename = "cheque")]
    Cheque,
    #[serde(rename = "direct debit")]
    DirectDebit,
    #[serde(rename = "interest")]
    Interest,
    #[serde(rename = "purchase")]
    Purchase,
    #[serde(rename = "standing order")]
    StandingOrder,
    #[serde(rename = "transfer")]
    Transfer,
    #[serde(rename = "null")]
    Null,

}

impl std::fmt::Display for TransactionCode {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Adjustment => write!(f, "adjustment"),
            Self::Atm => write!(f, "atm"),
            Self::BankCharge => write!(f, "bank charge"),
            Self::BillPayment => write!(f, "bill payment"),
            Self::Cash => write!(f, "cash"),
            Self::Cashback => write!(f, "cashback"),
            Self::Cheque => write!(f, "cheque"),
            Self::DirectDebit => write!(f, "direct debit"),
            Self::Interest => write!(f, "interest"),
            Self::Purchase => write!(f, "purchase"),
            Self::StandingOrder => write!(f, "standing order"),
            Self::Transfer => write!(f, "transfer"),
            Self::Null => write!(f, "null"),
        }
    }
}

impl Default for TransactionCode {
    fn default() -> TransactionCode {
        Self::Adjustment
    }
}

