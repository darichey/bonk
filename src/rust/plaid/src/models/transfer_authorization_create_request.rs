/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TransferAuthorizationCreateRequest : Defines the request schema for `/transfer/authorization/create`
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransferAuthorizationCreateRequest {
    /// Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    #[serde(rename = "client_id", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    /// Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    #[serde(rename = "secret", skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// The Plaid `access_token` for the account that will be debited or credited.
    #[serde(rename = "access_token")]
    pub access_token: String,
    /// The Plaid `account_id` corresponding to the end-user account that will be debited or credited.
    #[serde(rename = "account_id")]
    pub account_id: String,
    /// Specify the account used to fund the transfer. Should be specified if using legacy funding methods only. If using Plaid Ledger, leave this field blank. Customers can find a list of `funding_account_id`s in the Accounts page of your Plaid Dashboard, under the \"Account ID\" column. If this field is left blank and you are using legacy funding methods, this will default to the default `funding_account_id` specified during onboarding. Otherwise, Plaid Ledger will be used.
    #[serde(rename = "funding_account_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub funding_account_id: Option<Option<String>>,
    /// Specify which ledger balance used to fund the transfer. Customers can find a list of `ledger_id`s in the Accounts page of your Plaid Dashboard. If this field is left blank, this will default to id of the default ledger balance.
    #[serde(rename = "ledger_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ledger_id: Option<Option<String>>,
    /// The payment profile token associated with the Payment Profile that will be debited or credited. Required if not using `access_token`.
    #[serde(rename = "payment_profile_token", skip_serializing_if = "Option::is_none")]
    pub payment_profile_token: Option<String>,
    #[serde(rename = "type")]
    pub r#type: models::TransferType,
    #[serde(rename = "network")]
    pub network: models::TransferNetwork,
    /// The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\"). When calling `/transfer/authorization/create`, specify the maximum amount to authorize. When calling `/transfer/create`, specify the exact amount of the transfer, up to a maximum of the amount authorized. If this field is left blank when calling `/transfer/create`, the maximum amount authorized in the `authorization_id` will be sent.
    #[serde(rename = "amount")]
    pub amount: String,
    #[serde(rename = "ach_class", skip_serializing_if = "Option::is_none")]
    pub ach_class: Option<models::AchClass>,
    #[serde(rename = "wire_details", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub wire_details: Option<Option<Box<models::TransferWireDetails>>>,
    #[serde(rename = "user")]
    pub user: Box<models::TransferAuthorizationUserInRequest>,
    #[serde(rename = "device", skip_serializing_if = "Option::is_none")]
    pub device: Option<models::TransferAuthorizationDevice>,
    /// Plaid's unique identifier for the origination account for this authorization. If not specified, the default account will be used.
    #[serde(rename = "origination_account_id", skip_serializing_if = "Option::is_none")]
    pub origination_account_id: Option<String>,
    /// The currency of the transfer amount. The default value is \"USD\".
    #[serde(rename = "iso_currency_code", skip_serializing_if = "Option::is_none")]
    pub iso_currency_code: Option<String>,
    /// A random key provided by the client, per unique authorization, which expires after 48 hours. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create an authorization fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single authorization is created.  Idempotency does not apply to authorizations whose decisions are `user_action_required`. Therefore you may re-attempt the authorization after completing the required user action without changing `idempotency_key`.  This idempotency key expires after 48 hours, after which the same key can be reused. Failure to provide this key may result in duplicate charges.
    #[serde(rename = "idempotency_key", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub idempotency_key: Option<Option<String>>,
    /// If the end user is initiating the specific transfer themselves via an interactive UI, this should be `true`; for automatic recurring payments where the end user is not actually initiating each individual transfer, it should be `false`. This field is not currently used and is present to support planned future functionality.
    #[serde(rename = "user_present", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user_present: Option<Option<bool>>,
    /// If set to `false`, Plaid will not offer a `guarantee_decision` for this request (Guarantee customers only).
    #[serde(rename = "with_guarantee", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub with_guarantee: Option<Option<bool>>,
    /// The unique identifier returned by Plaid's [beacon](https://plaid.com/docs/transfer/guarantee/#using-a-beacon) when it is run on your webpage.
    #[serde(rename = "beacon_session_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub beacon_session_id: Option<Option<String>>,
    /// The Plaid client ID that is the originator of this transfer. Only needed if creating transfers on behalf of another client as a [Platform customer](https://plaid.com/docs/transfer/application/#originators-vs-platforms).
    #[serde(rename = "originator_client_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub originator_client_id: Option<Option<String>>,
    #[serde(rename = "credit_funds_source", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub credit_funds_source: Option<Option<models::TransferCreditFundsSource>>,
    /// Plaidâ€™s unique identifier for a test clock. This field may only be used when using `sandbox` environment. If provided, the `authorization` is created at the `virtual_time` on the provided test clock.
    #[serde(rename = "test_clock_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub test_clock_id: Option<Option<String>>,
}

impl TransferAuthorizationCreateRequest {
    /// Defines the request schema for `/transfer/authorization/create`
    pub fn new(access_token: String, account_id: String, r#type: models::TransferType, network: models::TransferNetwork, amount: String, user: models::TransferAuthorizationUserInRequest) -> TransferAuthorizationCreateRequest {
        TransferAuthorizationCreateRequest {
            client_id: None,
            secret: None,
            access_token,
            account_id,
            funding_account_id: None,
            ledger_id: None,
            payment_profile_token: None,
            r#type,
            network,
            amount,
            ach_class: None,
            wire_details: None,
            user: Box::new(user),
            device: None,
            origination_account_id: None,
            iso_currency_code: None,
            idempotency_key: None,
            user_present: None,
            with_guarantee: None,
            beacon_session_id: None,
            originator_client_id: None,
            credit_funds_source: None,
            test_clock_id: None,
        }
    }
}

