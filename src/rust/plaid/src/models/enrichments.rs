/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Enrichments : A grouping of the Plaid produced transaction enrichment fields.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Enrichments {
    /// The check number of the transaction. This field is only populated for check transactions.
    #[serde(rename = "check_number", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub check_number: Option<Option<String>>,
    /// The counterparties present in the transaction. Counterparties, such as the merchant or the financial institution, are extracted by Plaid from the raw description.
    #[serde(rename = "counterparties")]
    pub counterparties: Vec<crate::models::Counterparty>,
    /// A unique, stable, Plaid-generated ID that maps to the primary counterparty.
    #[serde(rename = "entity_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub entity_id: Option<Option<String>>,
    /// The ID of the legacy category to which this transaction belongs. For a full list of legacy categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).  We recommend using the `personal_finance_category` for transaction categorization to obtain the best results.
    #[serde(rename = "legacy_category_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub legacy_category_id: Option<Option<String>>,
    /// A hierarchical array of the legacy categories to which this transaction belongs. For a full list of legacy categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).  We recommend using the `personal_finance_category` for transaction categorization to obtain the best results.
    #[serde(rename = "legacy_category", skip_serializing_if = "Option::is_none")]
    pub legacy_category: Option<Vec<String>>,
    #[serde(rename = "location")]
    pub location: crate::models::Location,
    /// The URL of a logo associated with this transaction, if available. The logo will always be 100×100 pixel PNG file.
    #[serde(rename = "logo_url", deserialize_with = "Option::deserialize")]
    pub logo_url: Option<String>,
    /// The name of the primary counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description.
    #[serde(rename = "merchant_name", deserialize_with = "Option::deserialize")]
    pub merchant_name: Option<String>,
    #[serde(rename = "payment_channel")]
    pub payment_channel: crate::models::PaymentChannel,
    /// The phone number associated with the counterparty in E. 164 format. If there is a location match (i.e. a street address is returned in the location object), the phone number will be location specific.
    #[serde(rename = "phone_number", deserialize_with = "Option::deserialize")]
    pub phone_number: Option<String>,
    #[serde(rename = "personal_finance_category", deserialize_with = "Option::deserialize")]
    pub personal_finance_category: Option<crate::models::PersonalFinanceCategory>,
    /// The URL of an icon associated with the primary personal finance category. The icon will always be 100×100 pixel PNG file.
    #[serde(rename = "personal_finance_category_icon_url")]
    pub personal_finance_category_icon_url: String,
    #[serde(rename = "recurrence", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recurrence: Option<Option<crate::models::Recurrence>>,
    /// The website associated with this transaction.
    #[serde(rename = "website", deserialize_with = "Option::deserialize")]
    pub website: Option<String>,
}

impl Enrichments {
    /// A grouping of the Plaid produced transaction enrichment fields.
    pub fn new(counterparties: Vec<crate::models::Counterparty>, location: crate::models::Location, logo_url: Option<String>, merchant_name: Option<String>, payment_channel: crate::models::PaymentChannel, phone_number: Option<String>, personal_finance_category: Option<crate::models::PersonalFinanceCategory>, personal_finance_category_icon_url: String, website: Option<String>) -> Enrichments {
        Enrichments {
            check_number: None,
            counterparties,
            entity_id: None,
            legacy_category_id: None,
            legacy_category: None,
            location,
            logo_url,
            merchant_name,
            payment_channel,
            phone_number,
            personal_finance_category,
            personal_finance_category_icon_url,
            recurrence: None,
            website,
        }
    }
}


