/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PaymentInitiationConsentScope : This field is deprecated in favor of the consent `type` field. Consents are required to have a single type.   Payment consent scope. Defines possible directions for payments made with the given consent.  `ME_TO_ME`: Allows moving money between accounts owned by the same user.  `EXTERNAL`: Allows initiating payments from the user's account to third parties.
/// This field is deprecated in favor of the consent `type` field. Consents are required to have a single type.   Payment consent scope. Defines possible directions for payments made with the given consent.  `ME_TO_ME`: Allows moving money between accounts owned by the same user.  `EXTERNAL`: Allows initiating payments from the user's account to third parties.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PaymentInitiationConsentScope {
    #[serde(rename = "ME_TO_ME")]
    MeToMe,
    #[serde(rename = "EXTERNAL")]
    External,

}

impl std::fmt::Display for PaymentInitiationConsentScope {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::MeToMe => write!(f, "ME_TO_ME"),
            Self::External => write!(f, "EXTERNAL"),
        }
    }
}

impl Default for PaymentInitiationConsentScope {
    fn default() -> PaymentInitiationConsentScope {
        Self::MeToMe
    }
}

