/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ExternalPaymentScheduleGet : The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExternalPaymentScheduleGet {
    #[serde(rename = "interval")]
    pub interval: models::PaymentScheduleInterval,
    /// The day of the interval on which to schedule the payment.  If the payment interval is weekly, `interval_execution_day` should be an integer from 1 (Monday) to 7 (Sunday).  If the payment interval is monthly, `interval_execution_day` should be an integer indicating which day of the month to make the payment on. Integers from 1 to 28 can be used to make a payment on that day of the month. Negative integers from -1 to -5 can be used to make a payment relative to the end of the month. To make a payment on the last day of the month, use -1; to make the payment on the second-to-last day, use -2, and so on.
    #[serde(rename = "interval_execution_day")]
    pub interval_execution_day: i32,
    /// A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will begin on the first `interval_execution_day` on or after the `start_date`.  If the first `interval_execution_day` on or after the start date is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
    #[serde(rename = "start_date")]
    pub start_date: String,
    /// A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will end on the last `interval_execution_day` on or before the `end_date`. If the only `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.
    #[serde(rename = "end_date", deserialize_with = "Option::deserialize")]
    pub end_date: Option<String>,
    /// The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, this field will be `null`.
    #[serde(rename = "adjusted_start_date", deserialize_with = "Option::deserialize")]
    pub adjusted_start_date: Option<String>,
}

impl ExternalPaymentScheduleGet {
    /// The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once.
    pub fn new(interval: models::PaymentScheduleInterval, interval_execution_day: i32, start_date: String, end_date: Option<String>, adjusted_start_date: Option<String>) -> ExternalPaymentScheduleGet {
        ExternalPaymentScheduleGet {
            interval,
            interval_execution_day,
            start_date,
            end_date,
            adjusted_start_date,
        }
    }
}

