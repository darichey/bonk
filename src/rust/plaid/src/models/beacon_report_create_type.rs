/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// BeaconReportCreateType : The type of Beacon Report.  `first_party`: If this is the same individual as the one who submitted the KYC.  `stolen`: If this is a different individual from the one who submitted the KYC.  `synthetic`: If this is an individual using fabricated information.  `account_takeover`: If this individual's account was compromised.  `unknown`: If you aren't sure who committed the fraud.
/// The type of Beacon Report.  `first_party`: If this is the same individual as the one who submitted the KYC.  `stolen`: If this is a different individual from the one who submitted the KYC.  `synthetic`: If this is an individual using fabricated information.  `account_takeover`: If this individual's account was compromised.  `unknown`: If you aren't sure who committed the fraud.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BeaconReportCreateType {
    #[serde(rename = "first_party")]
    FirstParty,
    #[serde(rename = "stolen")]
    Stolen,
    #[serde(rename = "synthetic")]
    Synthetic,
    #[serde(rename = "account_takeover")]
    AccountTakeover,
    #[serde(rename = "data_breach")]
    DataBreach,
    #[serde(rename = "unknown")]
    Unknown,

}

impl std::fmt::Display for BeaconReportCreateType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::FirstParty => write!(f, "first_party"),
            Self::Stolen => write!(f, "stolen"),
            Self::Synthetic => write!(f, "synthetic"),
            Self::AccountTakeover => write!(f, "account_takeover"),
            Self::DataBreach => write!(f, "data_breach"),
            Self::Unknown => write!(f, "unknown"),
        }
    }
}

impl Default for BeaconReportCreateType {
    fn default() -> BeaconReportCreateType {
        Self::FirstParty
    }
}

