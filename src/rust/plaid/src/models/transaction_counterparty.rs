/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

/// TransactionCounterparty : The counterparty, such as the merchant or financial institution, is extracted by Plaid from the raw description.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TransactionCounterparty {
    /// The name of the counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description.
    #[serde(rename = "name")]
    pub name: String,
    /// A unique, stable, Plaid-generated ID that maps to the counterparty.
    #[serde(rename = "entity_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub entity_id: Option<Option<String>>,
    #[serde(rename = "type")]
    pub r#type: crate::models::CounterpartyType,
    /// The website associated with the counterparty.
    #[serde(rename = "website", deserialize_with = "Option::deserialize")]
    pub website: Option<String>,
    /// The URL of a logo associated with the counterparty, if available. The logo will always be 100×100 pixel PNG file.
    #[serde(rename = "logo_url", deserialize_with = "Option::deserialize")]
    pub logo_url: Option<String>,
    /// A description of how confident we are that the provided counterparty is involved in the transaction.  `VERY_HIGH`: We recognize this counterparty and we are more than 98% confident that it is involved in this transaction. `HIGH`: We recognize this counterparty and we are more than 90% confident that it is involved in this transaction. `MEDIUM`: We are moderately confident that this counterparty was involved in this transaction, but some details may differ from our records. `LOW`: We didn’t find a matching counterparty in our records, so we are returning a cleansed name parsed out of the request description. `UNKNOWN`: We don’t know the confidence level for this counterparty.
    #[serde(rename = "confidence_level", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub confidence_level: Option<Option<String>>,
}

impl TransactionCounterparty {
    /// The counterparty, such as the merchant or financial institution, is extracted by Plaid from the raw description.
    pub fn new(name: String, r#type: crate::models::CounterpartyType, website: Option<String>, logo_url: Option<String>) -> TransactionCounterparty {
        TransactionCounterparty {
            name,
            entity_id: None,
            r#type,
            website,
            logo_url,
            confidence_level: None,
        }
    }
}


