/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.586.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PaymentInitiationPaymentCreateRequest : PaymentInitiationPaymentCreateRequest defines the request schema for `/payment_initiation/payment/create`
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PaymentInitiationPaymentCreateRequest {
    /// Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    #[serde(rename = "client_id", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    /// Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    #[serde(rename = "secret", skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// The ID of the recipient the payment is for.
    #[serde(rename = "recipient_id")]
    pub recipient_id: String,
    /// A reference for the payment. This must be an alphanumeric string with at most 18 characters and must not contain any special characters (since not all institutions support them). In order to track settlement via Payment Confirmation, each payment must have a unique reference. If the reference provided through the API is not unique, Plaid will adjust it. Some institutions may limit the reference to less than 18 characters. If necessary, Plaid will adjust the reference by truncating it to fit the institution's requirements. Both the originally provided and automatically adjusted references (if any) can be found in the `reference` and `adjusted_reference` fields, respectively.
    #[serde(rename = "reference")]
    pub reference: String,
    #[serde(rename = "amount")]
    pub amount: Box<models::PaymentAmount>,
    #[serde(rename = "schedule", skip_serializing_if = "Option::is_none")]
    pub schedule: Option<Box<models::ExternalPaymentScheduleRequest>>,
    #[serde(rename = "options", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub options: Option<Option<Box<models::ExternalPaymentOptions>>>,
}

impl PaymentInitiationPaymentCreateRequest {
    /// PaymentInitiationPaymentCreateRequest defines the request schema for `/payment_initiation/payment/create`
    pub fn new(recipient_id: String, reference: String, amount: models::PaymentAmount) -> PaymentInitiationPaymentCreateRequest {
        PaymentInitiationPaymentCreateRequest {
            client_id: None,
            secret: None,
            recipient_id,
            reference,
            amount: Box::new(amount),
            schedule: None,
            options: None,
        }
    }
}

