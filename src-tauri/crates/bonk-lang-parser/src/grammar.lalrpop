use crate::lexer::Token;
use crate::tree::{Ledger, Transaction, Posting};

grammar<'input>(input: &'input str);

extern {
    type Location = usize;
    type Error = ();

    enum Token<'input> {
        "date" => Token::Date(<&'input str>),
        "description" => Token::Description(<&'input str>),
        "account" => Token::Account(<&'input str>),
        "amount" => Token::Amount(<&'input str>),
        " " => Token::Space,
        "\n" => Token::NewLine,
    }
}

pub Ledger: Ledger<'input> = {
    <t:Transaction> <mut ts:("\n" <Transaction>)*> => {
        ts.insert(0, t);
        Ledger {
            transactions: ts
        }
    }
}

Transaction: Transaction<'input> = {
    <date:"date"> " " <description:"description"> "\n" <p:Posting> <mut ps:("\n" <Posting>)*> "\n" => {
        ps.insert(0, p);
        Transaction {
            date,
            description,
            postings: ps
        }
    }
}

Posting: Posting<'input> = {
    " " " " <account:"account"> <amount:(" "+ <"amount">)?> => {
        Posting {
            account,
            amount
        }
    }
}
