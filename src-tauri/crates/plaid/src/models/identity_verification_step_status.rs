/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.457.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IdentityVerificationStepStatus : The status of a step in the identity verification process.

/// The status of a step in the identity verification process.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IdentityVerificationStepStatus {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "waiting_for_prerequisite")]
    WaitingForPrerequisite,
    #[serde(rename = "not_applicable")]
    NotApplicable,
    #[serde(rename = "skipped")]
    Skipped,
    #[serde(rename = "expired")]
    Expired,
    #[serde(rename = "canceled")]
    Canceled,
    #[serde(rename = "pending_review")]
    PendingReview,
    #[serde(rename = "manually_approved")]
    ManuallyApproved,
    #[serde(rename = "manually_rejected")]
    ManuallyRejected,

}

impl ToString for IdentityVerificationStepStatus {
    fn to_string(&self) -> String {
        match self {
            Self::Success => String::from("success"),
            Self::Active => String::from("active"),
            Self::Failed => String::from("failed"),
            Self::WaitingForPrerequisite => String::from("waiting_for_prerequisite"),
            Self::NotApplicable => String::from("not_applicable"),
            Self::Skipped => String::from("skipped"),
            Self::Expired => String::from("expired"),
            Self::Canceled => String::from("canceled"),
            Self::PendingReview => String::from("pending_review"),
            Self::ManuallyApproved => String::from("manually_approved"),
            Self::ManuallyRejected => String::from("manually_rejected"),
        }
    }
}

impl Default for IdentityVerificationStepStatus {
    fn default() -> IdentityVerificationStepStatus {
        Self::Success
    }
}




