/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.457.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IdentityVerificationCreateRequest : Request schema for '/identity_verification/create'



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct IdentityVerificationCreateRequest {
    /// A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the `/link/token/create` `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
    #[serde(rename = "client_user_id", skip_serializing_if = "Option::is_none")]
    pub client_user_id: Option<String>,
    /// A flag specifying whether you would like Plaid to expose a shareable URL for the verification being created.
    #[serde(rename = "is_shareable")]
    pub is_shareable: bool,
    /// ID of the associated Identity Verification template.
    #[serde(rename = "template_id")]
    pub template_id: String,
    /// A flag specifying whether the end user has already agreed to a privacy policy specifying that their data will be shared with Plaid for verification purposes.  If `gave_consent` is set to `true`, the `accept_tos` step will be marked as `skipped` and the end user's session will start at the next step requirement.
    #[serde(rename = "gave_consent")]
    pub gave_consent: bool,
    #[serde(rename = "user", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user: Option<Option<Box<crate::models::IdentityVerificationCreateRequestUser>>>,
    /// Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    #[serde(rename = "client_id", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    /// Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    #[serde(rename = "secret", skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// An optional flag specifying how you would like Plaid to handle attempts to create an Identity Verification when an Identity Verification already exists for the provided `client_user_id` and `template_id`. If idempotency is enabled, Plaid will return the existing Identity Verification. If idempotency is disabled, Plaid will reject the request with a `400 Bad Request` status code if an Identity Verification already exists for the supplied `client_user_id` and `template_id`.
    #[serde(rename = "is_idempotent", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_idempotent: Option<Option<bool>>,
}

impl IdentityVerificationCreateRequest {
    /// Request schema for '/identity_verification/create'
    pub fn new(is_shareable: bool, template_id: String, gave_consent: bool) -> IdentityVerificationCreateRequest {
        IdentityVerificationCreateRequest {
            client_user_id: None,
            is_shareable,
            template_id,
            gave_consent,
            user: None,
            client_id: None,
            secret: None,
            is_idempotent: None,
        }
    }
}


